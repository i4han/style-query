// Generated by CoffeeScript 1.12.2

let absurd = Absurd()

let baseUnits = {
    zIndex: ''
  , fontWeight: ''
  , flexGrow:   ''
  , flexShrink: ''
}

let cssValue = (k, v) => __.isNumber(v) ? String(v) + (k in baseUnits ? baseUnits[k] : 'px') : v

let cssDefaults = obj => {
  if (!__.isObject(obj)) return obj

  Object.keys(obj).forEach( k => {
    let ok
    if ( 'Bin$'  === obj[k].constructor.name ) obj[k] = obj[k].value
    if (__.isObject(obj[k]) && obj[k].valpha !== undefined) return obj[k] = obj[k].string()
    return obj[k] = __.isObject(ok = obj[k]) ? cssDefaults(ok) : cssValue(k, ok)  })
  return obj  }

let StyleQuery = (function() {
  function StyleQuery(selector) {
    var l, ref, results, sheets;
    this.selector = selector;
    this.rules = this.style = null;
    selector && (function() {
      results = [];
      for (var l = 0, ref = (sheets = document.styleSheets).length - 1; 0 <= ref ? l <= ref : l >= ref; 0 <= ref ? l++ : l--){ results.push(l); }
      return results;
    }).apply(this).forEach((function(_this) {
      return function(i) {
        var l, ref, ref1, results, rules;
        return ((typeof sheets !== "undefined" && sheets !== null ? (ref = sheets[i]) != null ? ref.cssRules : void 0 : void 0) != null) && (function() {
          results = [];
          for (var l = 0, ref1 = (rules = sheets[i].cssRules).length - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; 0 <= ref1 ? l++ : l--){ results.push(l); }
          return results;
        }).apply(this).forEach(function(j) {
          if (rules[j] && rules[j].selectorText === selector) {
            _this.rules = rules[j];
            return _this.style = rules[j].style;
          }
        });
      };
    })(this));
  }

  StyleQuery.prototype.get = function(property) {
    return this.style[property];
  };

  StyleQuery.prototype.set = function(property, value) {
    if (__.isObject(property)) {
      __.eachKeys(property, (function(_this) {
        return function(k) {
          return _this.set(k, property[k]);
        };
      })(this));
    } else {
      value = __.cssValue(property, value);
      property = __.dasherize(property);
      if (value === '') {
        this.style[property] && this.style.removeProperty(property);
      } else {
        this.style.setProperty(property, value);
      }
    }
    return this;
  };

  return StyleQuery;

})();

let removeRule = function(selector, property) {
  var l, ref, results, sheets;
  return (function() {
    results = [];
    for (var l = 0, ref = (sheets = document.styleSheets).length - 1; 0 <= ref ? l <= ref : l >= ref; 0 <= ref ? l++ : l--){ results.push(l); }
    return results;
  }).apply(this).forEach(function(i) {
    var l, ref, ref1, results, rules;
    return ((typeof sheets !== "undefined" && sheets !== null ? (ref = sheets[i]) != null ? ref.cssRules : void 0 : void 0) != null) && (function() {
      results = [];
      for (var l = 0, ref1 = (rules = sheets[i].cssRules).length - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; 0 <= ref1 ? l++ : l--){ results.push(l); }
      return results;
    }).apply(this).forEach(function(j) {
      if (rules[j] && rules[j].selectorText === selector) {
        if (__.isArray(property)) {
          return property.map(function(p) {
            return rules[j].style.removeProperty(p);
          });
        } else {
          return rules[j].style.removeProperty(property);
        }
      }
    });
  });
};

let insertRule = function(rule, index) {
  if (index == null) {
    index = 0;
  }
  if (window.cube.stylesheet.insertRule) {
    return window.cube.stylesheet.insertRule(rule, index);
  } else {
    return window.cube.stylesheet.addRule(rule);
  }
};

let removeMultipleRules = function(obj) {
  return __.isObject(obj) && __.keys(obj).forEach(function(k) {
    if (__.isArray(obj[k])) {
      return obj[k].forEach(function(p) {
        return removeRule(k, p);
      });
    } else {
      return removeRule(k, obj[k]);
    }
  });
};

let styleId = 'style-query-generated';

let insertCss = function(css) {
  !__.isElement(document.getElementById(styleId)) && document.getElementsByTagName('head')[0].appendChild((function() {
    var style;
    style = document.createElement("style");
    style.setAttribute("id", styleId);
    style.setAttribute("type", "text/css");
    return style;
  })());
  return document.getElementById(styleId).appendChild(document.createTextNode(css));
};

window.style$ = selector => {
  var css, idFound;
  switch (false) {
    case !__.isObject(selector):
      css = absurd.add(cssDefaults(selector)).compile();
      if (!__.isElement(idFound = document.getElementById(styleId))) {
        if (__.hasDOMLoaded()) {
          insertCss(css);
        } else {
          document.addEventListener("load", function(event) {
            return insertCss(css);
          });
        }
      } else {
        idFound.appendChild(document.createTextNode(css));
      }

      /*
      if __.isEmpty style = $ '#' + styleId then $ ($) ->
         __.isEmpty($ '#' + styleId) and $('head').append '<style styleId="' + styleId + '" type="text/css"></style>'
         $('#' + styleId).append css
      else style.append css
       */
      return new StyleQuery();
    case !__.isFunction(selector):
      return new StyleQuery(selector());
    case !__.isString(selector):
      return new StyleQuery(selector);
  }
}
